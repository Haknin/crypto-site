pipeline {
    agent any
    stages {
        stage('Clean Up') {
            steps {
                sh 'rm -rf *' // Clean up project files
                sh 'git clone https://github.com/Haknin/crypto-site.git' // Clone Git repository to update the project
                sh 'docker rmi -f haknin/crypto_docker:latest' // Delete previous Docker images
            }
        }
        stage('Build And Push The Image To Docker Hub') {
            steps {
                dir('crypto-site') {
                    sh "docker build -t haknin/crypto_docker:1.${BUILD_NUMBER} -t haknin/crypto_docker:latest ." // Create Docker image
                }
                sh "docker push haknin/crypto_docker:1.${BUILD_NUMBER}" // Push Docker image to Docker Hub
                sh 'docker push haknin/crypto_docker:latest'
                sh "docker image ls --format '{{.ID}}' haknin/crypto_docker --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}" // Cleanup old Docker images
            }
        }
        stage('Deploy Using Helm') {
            steps {
                dir('crypto-site') {
                    sh "gsutil cp gs://bucket-haknin/helm-project-${BUILD_NUMBER}.tgz helm.tgz" // Download Helm chart from GCP bucket
                    sh "tar -xzvf helm.tgz" // Extract the Helm chart
                    sh "helm upgrade --install myapp .crypto-site/helm/crypto_flask_haknin --set image.tag=1.${BUILD_NUMBER}" // Deploy using Helm
                }
            }
        }
        stage('Find your inner IP') {
            steps {
                sh 'chmod +x crypto-site/Load-Balancer-IP.sh'
                sh 'bash crypto-site/Load-Balancer-IP.sh'
            }
        }
    }
}



pipeline {
    agent any
    environment {
        repositoryName = 'flask-compose'
        dockerHubUsername = 'noaavisrur'
    }
    stages {
        stage('Clean up & clone') {
            steps {
                sh 'rm -rf *'
                sh 'git clone https://github.com/noaavisrur/flask-project.git'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('flask-project/jenkins') {
                    sh 'python3 versions-compose.py'
                }
            }
        }
        stage('Fetch Latest Helm Chart') {
            steps {
                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {
                    sh 'gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"'
                    script {
                        def helmCharts = sh(script: 'gsutil ls gs://flask_helm/helm-project*.tgz | sort', returnStdout: true).trim().split("\n")
                        def latestChart = helmCharts[helmCharts.size() - 1]
                        env.LATEST_CHART = latestChart.split("/").last()
                    }
                    echo "Latest chart to copy: ${env.LATEST_CHART}"
                    sh "gsutil cp gs://flask_helm/${env.LATEST_CHART} ."
                }
            }
        }
        stage('running kubernetes on test') {
            steps {
                sh 'kubectl config use-context rancher-desktop'
                sh 'kubectl delete deployments --all'
                sh 'kubectl delete services --all'
                sh 'helm uninstall my-release-name'
                sh "helm install my-release-name ${env.LATEST_CHART}"
                sh 'kubectl get nodes -o wide'
            }
        }
        stage('Testing') {
            steps {
                sh 'kubectl config get-contexts'
                sh 'bash /var/lib/jenkins/workspace/kubecloud_pipeline/flask-project/jenkins/test_localkube.sh flask-app-service'
            }
        }
        stage('deploy to prod') {
            steps {
                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {
                    sh 'gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"'
                    sh 'gcloud container clusters get-credentials cluster-1 --region us-central1-a --project disco-rope-393211'
                    sh 'kubectl delete deployments --all'
                    sh 'kubectl delete services --all'
                    sh "helm install my-release-name ${env.LATEST_CHART}"
                    sh 'sleep 60'
                    sh 'kubectl get svc flask-app-service'
                }
            }
        }
    }
}
