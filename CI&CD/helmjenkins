def performKubernetesApply(clusterName) {
    // Apply Flask app deployment
    sh """
    gcloud container clusters get-credentials ${clusterName} --project encoded-adviser-393206 --region us-central1-c
    helm repo add my-flask-app gs://bucket-haknin/
    helm repo update
    pwd
    cd /var/lib/jenkins/workspace/helm-pipe/crypto-site
    pwd
    chmod +x helmstatus.sh
    ./helmstatus.sh
    """
    
    // Sleep for a few seconds to allow the application to start
    sleep 20
}

pipeline {
    agent any
    stages {
        stage('Cleanup') {
            steps {
                // Clean up any previous Docker images and containers
                sh """
                docker rmi -f haknin/crypto_docker:latest
                """
            }
        }
        
        stage('Build And Push The Image To Docker Hub') {
            steps {
                script {
                    docker push "haknin/crypto_docker:1.${BUILD_NUMBER}"  // Push Docker image to Docker Hub
                    docker push haknin/crypto_docker:latest
                    docker image ls --format '{{.ID}}' haknin/crypto_docker --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}  // Cleanup old Docker images
                    chmod +x crypto-site/helm/helmstatus.sh
                    ./scripts/helm-version.sh
                }
            }
        }

        stage('Deploy Using Helm') {
            steps {
                // Copy Helm chart from GCS bucket and deploy
                sh """
                gsutil cp gs://bucket-haknin/helm-project-${BUILD_NUMBER}.tgz helm.tgz
                tar -xzvf helm.tgz
                helm upgrade --install myapp .crypto-site/helm/crypto_flask_haknin --set image.tag=1.10
                """
            }
        }
        
        stage('Test Website') {
            steps {
                // Test the deployed website
                sh """
                # Perform testing here
                """
            }
        }
    }
}
