pipeline {
    agent any
    environment {
        EC2_test_IP = null
        EC2_prod_IP = null
        externalIP = null
    }
    stages {
        stage('Clean and Clone git') {
            steps {
                sh 'pwd'
                sh 'rm -rf *'
                sh 'git clone https://github.com/Haknin/crypto-site.git'
            }
        }
        stage('Build and Cleanup Container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker_login', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'echo "apply the script"'
                    sh 'pwd'
                    sh 'cd crypto-site && python3 pythonversioning.py'
                }
            }
        }
        stage('Testing Kubernetes') {
            steps {
                script {
                    sh 'gcloud container clusters get-credentials test-cluster --region=europe-central2'
                    sh 'cd ci-cd && kubectl apply -f withredis.yaml'
                }
            }
        }
        stage('Get External IP') {
            steps {
                script {
                    sh 'sleep 30'
                    sh 'kubectl get svc flask-app-service --no-headers | awk \'{print $4}\' > external_ip_qa.txt'
                }
            }
        }
        stage('Testing Q/A') {
            steps {
                script {
                    sh '''
                    externalIP=$(cat 'external_ip_qa.txt')
                    curl_output=$(curl -s -o /dev/null -w "%{http_code}" http://${externalIP}:5000)
                    if [ "$curl_output" -eq "200" ]; then
                        echo "Site is working (200 OK)"
                    else
                        echo "Error: Site is not working"
                        exit 1
                    fi
                    '''
                }
            }
        }
        stage('Running Kubernetes') {
            steps {
                script {
                    sh 'gcloud container clusters get-credentials flask-cluster --region=europe-central2'
                    sh 'cd ci-cd && kubectl apply -f withredis.yaml'
                }
            }
        }
    }
}
